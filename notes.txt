Date-25th Aug

Q1. What is Bundlers? What is the difference between the following Parcel, Vite, Webpack?
2. dev dependency meaning
3. caret and tilde in package.json file
4. package-lock.json-- NEVER EVER put package-lock.json in gitignore
    keeps the track of EXACT version of  the package that the project is using
5. Node modules
NEVER EVER edit NodeModules, Dist folder files, package-lock.json, package.json.

Date-26th Aug

1. react-dom/client
2. Parcel does -  

    Hot module reload or HMR, 
    File watcher algorithm written in C++ 
    ImageOptimization
    Caching while development
    compatible with older version of browsers- Adds polyfills
    HTTPS on dev
    Differen port number for each project 
    Superfast
    Consistent hashing algorithm
    Tree Shaking- removing unwanted code


3. When we use Parcel we do not require entry point in package.json, so remove ["main": "App.js",] from 
    package.json
4. Parcel during build command- bundles, minifies, cleans like removing console.log 
5. Media like Images etc is the heaviest in the website and take a lot of time to load 


Date 27 Aug

1. Transitive dependencies


    A----->B------->C

    A--------------->C   (transitive dependency)

    if A is dependent on B , and B is dependent on C,
    then A is transitive dependent on C


2. Dependency tree
Parcel documentation
browserlist.dev, query composition --> Helps in making the application compatible for 
the older browsers.


Commands in parcel 

npx parcel index.html



Date : 28 Aug

* browserlist- last 10 chrome versions -- It does not mean that it will only work on last 10 version rather, it guarantees
that it will surely work on last 10 chrome versions.

Normal dependencies and Dev dependency in package.json
Polyfills
Babel-  it can convert the latest version of JavaScript code into the one that the old browser understands.


Date 29 Aug


React.createElement ==> Object ==> HTML element 

React.createElement was very ugly and non-readable so FB developers created JSX

NOTE: JSX is a HTML LIKE SYNTAX but it is NOT HTML inside JavaScript. 
Key is a way through which React tracks uniqueness

JSX ==> React.createElement ==> Object ==> HTML element 
In the  backend Babel is converting JSX to react code

HW- difference between HTML and JSX

If possible learn about Babel as a crash course.


Date 30 Aug

* JSX is not imported, it is just a syntax, or a way of writing codde that babel understands and coonverts 
into React understandable ugly code.

* The node modules has a separate package-load.json to keep track of all the versions of the transitive dependencies
in the NodeModules folder. Even the folder in node module has its separate package.json file to keep track of
version of its dependencies.

Even if the node-modules is in the .gitignore file, even then it is everytime created when we build in the server
using the package.json and package-lock.json ehich is pushed to the repository.

*


Date 31 Aug


FUNCTIONAL COMPONENT

* Functional component is just a JavaScript function. So it can be called using () as well
* Name of Functional component should always start with a Capital letter.
* Sanitisation  


Date 01 September


* Component composition- When we use component inside component
* ID is a HTML thing but KEY is a JS thing


Date 02 September


Date 03 September

* JSX can only have one parent. For this we can use div as a parent element, or we can use React.Fragment component

            <React.Fragment> 

                Your code here

            </React.Fragment>

            ======OR========

            //Shorthand for React.Fragment 
            <>  
                Your code here
            </>

*Inline styling in react

Can we use Fragment inside Fragment


Date 06 September

Date 07 September

Date 08 September

* React Props- Props are arguments passed into React components.
Props are passed to components via HTML attributes.

eg-

function Car(props) {
  return <h2>I am a { props.brand }!</h2>;
}


* Props can be destructured on the fly

//this is destructuring on the fly,instead of passing props as arguments, list the individual elements
//as arguments

const Restaurantcard=({resname, category, rating})=>(     
  <div className="res-card">
    <h2>{resname}</h2>
    <img src={noodles} alt="noodles" />
    <h2>{category}</h2>      
    <h3>{rating}</h3>
  </div>
)